#!/bin/zsh

# Usage:
#
#      e.g.:   a -> b -> c -> d  ....
#
#      sll a
#
#
#      if parameter is given with leading '=', lookup $PATH for parameter and resolve that
#
#      sll =java
#
#      Note: limit for recursive symlinks on linux:
#            http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/namei.c?id=refs/heads/master#l808
#            This limits recursive symlink follows to 8,
#            while limiting consecutive symlinks to 40.
#
#      When resolving and displaying information about symlinks, no check is made
#      that the displayed information does make any sense on your OS.
#      We leave that decision to the user.
#
#      The zstat module is used to detect symlink loops. zstat is available since zsh4.
#      With an older zsh you will need to abort with <C-c> in that case.
#      When a symlink loop is detected, a warning ist printed and further processing is stopped.
#
#      Known bugs:
#      If you happen to come across a symlink that points to a destination on an other partition
#      with the same inode number, that will be marked as symlink loop though it is not.
#      Two hints for this situation:
#      I)  Play lottery the same day, as you seem to be rather lucky right now.
#      II) Send patches.
#
#      return status:
#      0 upon success
#      1 file/dir not accessible
#      2 symlink loop detected
function symbolic-link-detail () {
  if [[ -z ${1} ]] ; then
    printf 'Usage: %s <symlink(s)>\n' "${0}"
    return 1
  fi

  local file jumpd curdir
  local -i 10 RTN LINODE i
  local -a    SEENINODES
  curdir="${PWD}"
  RTN=0

  for file in "${@}" ; do
    SEENINODES=()
    ls -l "${file:a}"   || RTN=1

    while [[ -h "$file" ]] ; do
      LINODE=$(zstat -L +inode "${file}")
      for i in ${SEENINODES} ; do
        if (( ${i} == ${LINODE} )) ; then
          builtin cd -q "${curdir}"
          print 'link loop detected, aborting!'
          return 2
        fi
      done
      SEENINODES+=${LINODE}
      jumpd="${file:h}"
      file="${file:t}"

      if [[ -d ${jumpd} ]] ; then
        builtin cd -q "${jumpd}"  || RTN=1
      fi
      file=$(readlink "$file")

      jumpd="${file:h}"
      file="${file:t}"

      if [[ -d ${jumpd} ]] ; then
        builtin cd -q "${jumpd}"  || RTN=1
      fi

      ls -l "${PWD}/${file}"     || RTN=1
    done
    shift 1
    if (( ${#} >= 1 )) ; then
      print ""
    fi
    builtin cd -q "${curdir}"
  done
  return ${RTN}
}
symbolic-link-detail "$@"
