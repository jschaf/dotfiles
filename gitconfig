[alias]	
br = branch
ci = commit
cm = commit -m
cl = clone
co = checkout
cp = cherry-pick
d = diff --word-diff=color
diff = diff --word-diff=color
dc = diff --cached
pom = "!git push origin master"
sl = stash list
sa = stash apply
ss = stash save
st = status -s
unstage = reset HEAD --
# Adds a file to .gitignore.
ignore="!f() { echo $1 >> \"${GIT_PREFIX}.gitignore\"; }; f"
# Ignores a file that's in the repository.
lock="update-index --skip-worktree"
# Stop ignoring a file that's in the repository.
unlock="update-index --no-skip-worktree"
# Show modified files in last commit.
dl = "!git ll -1"
# Show a diff of the last commit
dlc = diff --cached HEAD^
# Show a diff of specific commit
dr  = "!f() { git diff "$1"^.."$1"; }; f"

# List files modified in the given commit.  Defaults to current commit.
wo = "!f() { git diff-tree --no-commit-id --name-only -r "${1:-HEAD}"; }; f"

# Find a file in the codebase
f = "!git ls-files | grep -i"

#list remotes
rem="!git config -l | grep remote.*url | tail -n +2"

# Search codebase for a string
grep = grep -Ii
gr = grep -Ii

le = log --oneline --decorate
ll = log --pretty=format:"%C(yellow)%h%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]" --decorate --stat
llp = log --pretty=format:"%C(yellow)%h%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]" --decorate --stat -p --word-diff=color --function-context
# hash [authorDate] (branch) summary [commiterName]
ls = log --pretty=format:"%C(yellow)%h\\ %C(green)[%ad]%C(red)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
# Same as ls with no date
ls1 = log --pretty=format:"%C(yellow)%h%C(red)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
lg = log --graph --pretty=format:"%C(yellow)%h\\ %C(green)%ad%C(red)%d\\ %C(reset)%s%C(blue)\\ [%cn]" --abbrev-commit --date=relative
lc  = "!f() { git ll $1^..$1; }; f"
# Plain, no color - hash commitMessage [commiterName]
lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

changes = diff --name-status -r
diffstat = diff --stat -r
# new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
new = !git log $1@{1}..$1@{0} "$@"
prune-all = !git remote | xargs -n 1 git remote prune
aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

# list who has contributed to a project	
who=shortlog -n -s --no-merges

# remove local and remote branches
rmb = !sh -c 'git branch -D $1 && git push origin :$1' -

up = pull --rebase upstream master

[color]
branch = auto
diff = auto
interactive = auto
status = auto
ui = auto

[core]
editor = emacsclient
excludesfile = ~/.config/git/global_gitignore
pager = less -+$LESS -FRX
eol = lf
autocrlf = input
commitGraph = true

[diff]
renames = copies
algorithm = histogram

[user]
name = Joe Schafer
email = joe@jschaf.com

[push]
default = simple

[merge]
stat = true

[github]	
user = jschaf

[include]	
path = ~/.config/github/gitconfig
path = ~/.gitconfig-system
[url "git@github.com:jschaf/"]
insteadOf = "ghj:"
[url "https://github.com/"]
insteadOf = "gh:"
[filter "media"]
clean = git-media-clean %f
smudge = git-media-smudge %f
[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[credential]
helper = netrc

[help]
# Autocorrect spelling mistakes, e.g. git chekcout -> git checkout.
autocorrect = 1

[pull]
rebase = true
[color "diff-highlight"]
oldNormal = red bold
oldHighlight = red bold 52
newNormal = green bold
newHighlight = green bold 22

[magit]
hideCampaign = true
[gc]
writeCommitGraph = true
[pack]
	sparse = true
